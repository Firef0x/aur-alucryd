diff -rupN scratch-text-editor.orig/plugins/terminal/CMakeLists.txt scratch-text-editor/plugins/terminal/CMakeLists.txt
--- scratch-text-editor.orig/plugins/terminal/CMakeLists.txt	2014-11-20 11:02:03.429595216 +0100
+++ scratch-text-editor/plugins/terminal/CMakeLists.txt	2014-11-20 11:55:58.274068323 +0100
@@ -1,4 +1,8 @@
+pkg_check_modules (VTE "vte-2.91")
+if (NOT VTE_FOUND)
 pkg_check_modules (VTE REQUIRED "vte-2.90")
+endif()
+
 if (${VTE_FOUND})
 add_definitions(${NORMAL_CFLAGS})
 include_directories(${CMAKE_BINARY_DIR} ${CMAKE_BINARY_DIR}/scratchcore/)
@@ -8,6 +12,7 @@ add_definitions (${VTE_CFLAGS})
 link_libraries (${VTE_LIBRARIES})
 link_directories (${VTE_LIBRARY_DIRS})
 
+if (${VTE_VERSION} VERSION_LESS "0.38.0")
 vala_precompile(VALA_C
     terminal.vala
 PACKAGES
@@ -25,6 +30,26 @@ OPTIONS
     --vapidir=${CMAKE_SOURCE_DIR}/vapi/
     --vapidir=${CMAKE_BINARY_DIR}/scratchcore/
 )
+else()
+vala_precompile(VALA_C
+    terminal.vala
+PACKAGES
+    vte-2.91
+    granite
+    gtksourceview-3.0
+    scratchcore
+    gee-0.8
+    libpeas-1.0
+    ${ZEITGEIST_DEPS}
+OPTIONS
+    --thread
+    --vapidir=${CMAKE_BINARY_DIR}
+    --vapidir=${CMAKE_BINARY_DIR}/src/
+    --vapidir=${CMAKE_SOURCE_DIR}/vapi/
+    --vapidir=${CMAKE_BINARY_DIR}/scratchcore/
+    --define=VTE291
+)
+endif()
 add_library(terminal MODULE ${VALA_C})
 add_dependencies(terminal scratchcore scratch)
 install(TARGETS terminal DESTINATION lib/scratch/plugins/terminal/)
diff -rupN scratch-text-editor.orig/plugins/terminal/terminal.vala scratch-text-editor/plugins/terminal/terminal.vala
--- scratch-text-editor.orig/plugins/terminal/terminal.vala	2014-11-20 11:02:03.429595216 +0100
+++ scratch-text-editor/plugins/terminal/terminal.vala	2014-11-20 12:11:00.675242491 +0100
@@ -88,7 +88,12 @@ public class Scratch.Plugins.Terminal :
         // Set terminal font to system default font
         var system_settings = new GLib.Settings ("org.gnome.desktop.interface");
         string font_name = system_settings.get_string ("monospace-font-name");
+        #if ! VTE291
         this.terminal.set_font_from_string (font_name);
+        #else
+        var fd = Pango.FontDescription.from_string(font_name);
+        this.terminal.set_font(fd);
+        #endif
 
         // Set allow-bold, audible-bell, background, foreground, and palette of pantheon-terminal
         var schema_source = SettingsSchemaSource.get_default ();
@@ -102,15 +107,27 @@ public class Scratch.Plugins.Terminal :
             bool audible_bell_setting = pantheon_terminal_settings.get_boolean ("audible-bell");
             this.terminal.set_audible_bell (audible_bell_setting);
 
+            #if ! VTE291
             this.terminal.set_background_image (null); // allows background and foreground settings to take effect
+            #endif
 
             string background_setting = pantheon_terminal_settings.get_string ("background");
+            #if ! VTE291
             Gdk.Color background_color;
             Gdk.Color.parse (background_setting, out background_color);
+            #else
+            Gdk.RGBA background_color = Gdk.RGBA ();
+            background_color.parse(background_setting);
+            #endif
 
             string foreground_setting = pantheon_terminal_settings.get_string ("foreground");
+            #if ! VTE291
             Gdk.Color foreground_color;
             Gdk.Color.parse (foreground_setting, out foreground_color);
+            #else
+            Gdk.RGBA foreground_color = Gdk.RGBA ();
+            foreground_color.parse(foreground_setting);
+            #endif
 
             string palette_setting = pantheon_terminal_settings.get_string ("palette");
 
@@ -131,11 +148,20 @@ public class Scratch.Plugins.Terminal :
                 }
             }
 
+            #if ! VTE291
             Gdk.Color[] palette = new Gdk.Color[16];
+            #else
+            Gdk.RGBA[] palette = new Gdk.RGBA[16];
+            #endif
 
             for (int i = 0; i < hex_palette.length; i++) {
+                #if ! VTE291
                 Gdk.Color new_color;
                 Gdk.Color.parse (hex_palette[i], out new_color);
+                #else
+                Gdk.RGBA new_color = Gdk.RGBA ();
+                new_color.parse(hex_palette[i]);
+                #endif
 
                 palette[i] = new_color;
             }
@@ -170,7 +196,11 @@ public class Scratch.Plugins.Terminal :
         });
        
         try {
+            #if ! VTE291
             this.terminal.fork_command_full (Vte.PtyFlags.DEFAULT, "~/", { Vte.get_user_shell () }, null, GLib.SpawnFlags.SEARCH_PATH, null, null);
+            #else
+            this.terminal.spawn_sync (Vte.PtyFlags.DEFAULT, "~/", { Vte.get_user_shell () }, null, GLib.SpawnFlags.SEARCH_PATH, null, null, null);
+            #endif
         } catch (GLib.Error e) {
             warning (e.message);
         }
@@ -196,4 +226,4 @@ public void peas_register_types (GLib.Ty
     var objmodule = module as Peas.ObjectModule;
     objmodule.register_extension_type (typeof (Peas.Activatable),
                                      typeof (Scratch.Plugins.Terminal));
-}
\ No newline at end of file
+}
